--
--============================================================
model PIMETA
--============================================================

--------------------------------------------------------------
-- PACKAGE: PIMETA -> Classes
--------------------------------------------------------------

--------------------------------------------------------------
class Paradigm
	attributes
		name: String
end --

--------------------------------------------------------------
class Formalism
	attributes
		name: String
	
	operations
	
		// this is an auxiliar operation to allow the implementation of the circularBaseFormalisms() predicate
		circularBaseFormalismsAux(setF: Set(Formalism)): Bag(Formalism) =
				if (setF->includes(self.base)) then
					setF->asBag()->including(self.base)
				else
					self.base.circularBaseFormalismsAux(setF->including(self.base))
				endif

		circularBaseFormalisms(): Boolean =
                        circularBaseFormalismsAux(oclEmpty(Set(Formalism)))->size() <> 
                        circularBaseFormalismsAux(oclEmpty(Set(Formalism)))->asSet()->size() 

		allBaseFormalisms(): Set(Formalism) =
			if self.base = oclUndefined(Formalism) then
				oclEmpty(Set(Formalism))
			else
 				self.base.allBaseFormalisms() -> including(self.base)
 			endif		

		allExtensionFormalisms(): Set(Formalism) =
			if self.extension->isEmpty() then
				oclEmpty(Set(Formalism))
			else
 				self.extension->union(self.extension.allExtensionFormalisms()->asSet())
 			endif		


end --

--------------------------------------------------------------
class Dependency
	attributes
		name: String
		locations: Sequence(String)

	operations

		counter(): Integer = locations->size()

		weightedCounter(): Real = counter()*dependencyType.weight

		addLocation(location: String): Sequence(String) = 
			if locations->isUndefined then 
				oclEmpty(Sequence(String))->append(location)
			else
				locations->append(location)
			endif
end --

--------------------------------------------------------------
class DependencyType
	attributes
		name: String
		weight: Real
end --

--------------------------------------------------------------
class FeatureType
	attributes
		name: String

	operations

		// this is an auxiliar operation to allow the implementation of the circularModularFeatureTypes() predicate
		circularModularFeatureTypesAux(setF: Set(ModularFeatureType)): Bag(ModularFeatureType) =
			if (setF->includes(self.modularFeatureType)) then
				setF->asBag()->including(self.modularFeatureType)
			else
				self.modularFeatureType.circularModularFeatureTypesAux(setF->including(self.modularFeatureType))
			endif

		circularModularFeatureTypes(): Boolean =
                        circularModularFeatureTypesAux(oclEmpty(Set(ModularFeatureType)))->size() <> 
                        circularModularFeatureTypesAux(oclEmpty(Set(ModularFeatureType)))->asSet()->size() 

		enclosingModularFeatureType() : ModularFeatureType = self.modularFeatureType

		allEnclosingModularFeatureTypesRecursively(): Set(ModularFeatureType) =
			if self.modularFeatureType = oclUndefined(ModularFeatureType) then
				oclEmpty(Set(ModularFeatureType))
			else
 			    self.modularFeatureType.allEnclosingModularFeatureTypesRecursively() 
				-> including(self.modularFeatureType)
 			endif		
		
		
 		alldependeeFeatureTypes(): Set(FeatureType) = self.dependencyTypeOrigins.destination->asSet

		internalDependeeFeatureTypes(): Set(FeatureType) = oclEmpty(Set(FeatureType))

		externalDependeeFeatureTypes(): Set(FeatureType) = 
			self.alldependeeFeatureTypes() - self.internalDependeeFeatureTypes()

	//	allDependencyTypes(): Set(DependencyType) = DependencyType.allInstances->select(origin=self)
end --

--------------------------------------------------------------
class ModularFeatureType < FeatureType

//	operations

end --

--------------------------------------------------------------
class AtomicFeatureType < FeatureType 
end --

--------------------------------------------------------------
class Nature	
	attributes
		name: String
end --


--------------------------------------------------------------
class Feature

	attributes
		name: String

	operations

		enclosingModularFeature() : ModularFeature = self.modularFeature

		rootFeature(): ModularFeature =
				if self.modularFeature = oclUndefined(ModularFeature) then
		                self.oclAsType(ModularFeature)
				else
 				    self.modularFeature.rootFeature()
 				endif

		modularSiblings(): Set(Feature) = 
				if enclosingModularFeature() = oclUndefined(ModularFeature) then
		                oclEmpty(Set(Feature))
				else
 				    enclosingModularFeature().allEnclosedFeatures()->excluding(self)
 				endif

		siblingDependeeFeatures(): Set(Feature) = self.modularSiblings()->
			intersection(self.allDependeeFeatures().allEnclosingModularFeaturesRecursively())
	
		siblingDependentFeatures(): Set(Feature) = self.modularSiblings()->
			intersection(self.allDependentFeatures().allEnclosingModularFeaturesRecursively())

		allEnclosingModularFeaturesRecursively(): Set(ModularFeature) =
				if self.modularFeature = oclUndefined(ModularFeature) then
		                oclEmpty(Set(ModularFeature))
				else
 				    self.modularFeature.allEnclosingModularFeaturesRecursively() -> including(self.modularFeature)
 				endif		
		
		internalDependencies(): Set(Dependency) = oclEmpty(Set(Dependency))

		inboundDependencies(): Set(Dependency) = self.dependencyDestinations

		outboundDependencies(): Set(Dependency) = self.dependencyOrigins

		externalDependencies(): Set(Dependency) = Dependency.allInstances
						-internalDependencies() -inboundDependencies() -outboundDependencies()

		internalFeatures(): Set(Feature) = oclEmpty(Set(Feature))
		externalFeatures(): Set(Feature) = (Feature.allInstances-internalFeatures())->excluding(self)

 		allDependeeFeatures(): Set(Feature) = self.dependencyDestinations.origin->asSet
 		allDependentFeatures(): Set(Feature) = self.dependencyOrigins.destination->asSet

		allIndirectDependeeFeatures(): Set(Feature) = allIndirectDependeeFeatures_aux() - allDependeeFeatures()
 		allIndirectDependeeFeatures_aux(): Set(Feature) = allDependeeFeatures()->union(self.dependencyOrigins.destination.allIndirectDependeeFeatures_aux()->asSet)

		allIndirectDependentFeatures(): Set(Feature) = allIndirectDependentFeatures_aux() - allDependentFeatures()
 		allIndirectDependentFeatures_aux(): Set(Feature) = allDependentFeatures()->union(self.dependencyDestinations.origin.allIndirectDependentFeatures_aux()->asSet)

		internalDependeeFeatures(): Set(Feature) = oclEmpty(Set(Feature))
		internalDependentFeatures(): Set(Feature) = oclEmpty(Set(Feature))

		externalDependeeFeatures(): Set(Feature) = self.allDependeeFeatures() - self.internalDependeeFeatures()
		externalDependentFeatures(): Set(Feature) = self.allDependentFeatures() - self.internalDependentFeatures()

	//	allDependencies(): Set(Dependency) = Dependency.allInstances->select(origin=self)

		hasCommonRoot(other: Feature): Boolean = self.rootFeature() = other.rootFeature()

		featuresWithoutCommonRoot(): Set(Feature) = self.externalFeatures()->reject(f: Feature | self.hasCommonRoot(f))
		featuresWithCommonRoot(): Set(Feature) = Feature.allInstances->excluding(self) - featuresWithoutCommonRoot()

		-- Common external dependee features between the current feature and the "other" feature
		externalDependeeFeaturesSharedWith(other: ModularFeature): Set(Feature) = 
			self.externalDependeeFeatures()->intersection(other.externalDependeeFeatures())

		-- Common external dependent features between the current feature and the "other" feature
		externalDependentFeaturesSharedWith(other: ModularFeature): Set(Feature) = 
			self.externalDependentFeatures()->intersection(other.externalDependentFeatures())
			
		-- External dependee features belonging to the "other" feature
		externalDependeeFeaturesAggregatedBy(other: ModularFeature): Set(Feature) = 
			self.externalDependeeFeatures()->intersection(other.internalFeatures())

		-- External dependent features belonging to the "other" feature
		externalDependentFeaturesAggregatedBy(other: ModularFeature): Set(Feature) = 
			self.externalDependentFeatures()->intersection(other.internalFeatures())
			


		-------------- DENSITY METRICS -------------------

		-- Source Coupling Density Size:
		-- Number of different dependencies from a feature and its internals towards its external features

		SCouDenS(): Real = outboundDependencies()->collect(counter())->sum

		-- Source Coupling Weighted Density Size:				
		SCouWDenS(): Real = outboundDependencies()->collect(weightedCounter())->sum

		-- Target Coupling Density Size:
		-- Number of different dependencies from the external features towards a feature and its internal features					
		TCouDenS(): Real = inboundDependencies()->collect(counter())->sum

		-- Target Coupling Weighted Density Size:
		TCouWDenS(): Real = inboundDependencies()->collect(weightedCounter())->sum
		
		-- Here, relative metrics can be applied to understand how the density from a feature contributes to the overall
		-- cohesion or coupling of the feature at which it is implemented. Examples:
		-- RSCouDens(f); RTSCouDens(f); RSCohDens(f); RTCohDens(f)
		
	
	
	
		-------------- ABSOLUTE COUPLING METRICS -------------------

		-- Source Coupling Coverage Size: 
		-- Number of different external features on which a feature depends
		SCouCovS(): Integer = externalDependeeFeatures()->size()

		-- Source Coupling Coverage Index: 
		-- Percentage of different external features on which a feature depends
		SCouCovI(): Real = 
				if self.externalFeatures()->isEmpty() then
 				    0.0
				else
 				    SCouCovS() / self.externalFeatures()->size()
 				endif

		-- Source Coupling Clustering Size
		-- Number of different external features on which a feature dependens which belong to disjoint clusters
		-- Note: clusters are disjoint if the intersection of their parents is empty
		SCouCluS():Integer = self.externalDependeeFeatures()->reject(f: Feature | self.hasCommonRoot(f))->size()

		-- Source Coupling Clustering Index
		-- Percentage of different external features on which a feature dependens which belong to disjoint clusters
		SCouCluI(): Real = 
				if self.featuresWithoutCommonRoot()->isEmpty() then
 				    0.0
				else
 				    SCouCluS() / self.featuresWithoutCommonRoot()->size()
 				endif

		-- Target Coupling Clustering Size
		-- Number of different external features depending on a feature which belong to disjoint clusters
		TCouCluS():Integer = self.externalDependentFeatures()->reject(f: Feature | self.hasCommonRoot(f))->size()

		-- Target Coupling Clustering Index
		-- Percentage of different external features depending on a feature which belong to disjoint clusters
		TCouCluI(): Real =
				if self.featuresWithoutCommonRoot()->isEmpty() then
 				    0.0
				else
 				    TCouCluS() / self.featuresWithoutCommonRoot()->size()
 				endif

		-- Target Coupling Coverage Size: 
		-- Number of different external features depending on a feature
		TCouCovS(): Integer = externalDependentFeatures()->size()

		-- Target Coupling Coverage Index: 
		-- Percentage of different external features depending on a feature
		TCouCovI(): Real = 
				if self.externalFeatures()->isEmpty() then
 				    0.0
				else
 				    TCouCovS() / self.externalFeatures()->size()
 				endif
				
		-------------- RELATIVE COUPLING METRICS -------------------

				
		-- Relative Source Coupling Coverage Size:
		-- Number of different features, external to another feature, on which a feature depends
		RSCouCovS(container: ModularFeature): Integer = self.externalDependeeFeaturesSharedWith(container)->size()

		-- Relative Source Coupling Coverage Index:
		-- Percentage of different features, external to another feature, on which a feature depends
		RSCouCovI(container: ModularFeature): Real =
				if container.externalFeatures()->isEmpty() then
 				    0.0
				else
 				    RSCouCovS(container) / container.externalFeatures()->size()
 				endif

		-- Relative Target Coupling Coverage Size:
		-- Number of different features, external to another feature, depending on a feature
		RTCouCovS(container: ModularFeature): Integer = self.externalDependentFeaturesSharedWith(container)->size()

		-- Relative Target Coupling Coverage Index:
		-- Percentage of different features, external to another feature, depending on a feature
		RTCouCovI(container: ModularFeature): Real =
				if container.externalFeatures()->isEmpty() then
 				    0.0
				else
 				    RTCouCovS(container) / container.externalFeatures()->size()
 				endif

		-------------- RELATIVE COHESION METRICS -------------------



		-- Relative Source Cohesion Coverage Size:
		-- Number of different external features, internal to another feature, which contains it, a feature depends on
		RSCohCovS(container: ModularFeature): Integer = self.externalDependeeFeaturesAggregatedBy(container)->size()


		-- Relative Target Cohesion Coverage Size:
		-- Number of different external features, internal to another feature, which contains it, depend on a feature
		RTCohCovS(container: ModularFeature): Integer = self.externalDependentFeaturesAggregatedBy(container)->size()

	
end --

--------------------------------------------------------------
class AtomicFeature < Feature


end --

--------------------------------------------------------------
class ModularFeature < Feature
	operations

		internalDependencies(): Set(Dependency) = allEnclosedFeaturesRecursively()->including(self).dependencyDestinations->asSet->
							intersection(allEnclosedFeaturesRecursively()->including(self).dependencyOrigins->asSet)

		inboundDependencies(): Set(Dependency) = allEnclosedFeaturesRecursively()->including(self).dependencyDestinations->asSet->
							intersection(externalFeatures().dependencyOrigins->asSet)

		outboundDependencies(): Set(Dependency) = allEnclosedFeaturesRecursively()->including(self).dependencyOrigins->asSet->
							intersection(externalFeatures().dependencyDestinations->asSet)

		internalFeatures(): Set(Feature) = allEnclosedFeaturesRecursively()

		allEnclosedFeatures(): Set(Feature) = self.feature

		allEnclosedFeaturesRecursively(): Set(Feature) =
		    allEnclosedFeatures()->union(self.allEnclosedFeatures()->
			iterate(e: Feature;  acc: Set(Feature) = oclEmpty(Set(Feature)) |
				if e.oclIsTypeOf(ModularFeature) then
		               acc -> union(e.oclAsType(ModularFeature).allEnclosedFeaturesRecursively())
				else
				   acc -> including(e)
				endif
			)
		   )

		allEnclosedModularFeatures(): Set(ModularFeature) = 
			self.feature -> select(oclIsTypeOf(ModularFeature)) -> collect(oclAsType(ModularFeature)) -> asSet()
		
		allEnclosedModularFeaturesRecursively(): Set(ModularFeature) = 
			self.allEnclosedFeaturesRecursively() -> select(oclIsTypeOf(ModularFeature)) 
				-> collect(oclAsType(ModularFeature)) -> asSet()

		allDependeeFeatures(): Set(Feature) =  self.dependencyOrigins.destination->asSet -> 
			union(
				self.allEnclosedFeaturesRecursively() ->		
					iterate(e: Feature;  acc: Set(Feature) = oclEmpty(Set(Feature)) |
						acc ->union(e.allDependeeFeatures())
					)
				)

		allDependentFeatures(): Set(Feature) =  self.dependencyDestinations.origin->asSet -> 
			union(
				self.allEnclosedFeaturesRecursively() ->		
					iterate(e: Feature;  acc: Set(Feature) = oclEmpty(Set(Feature)) |
						acc ->union(e.allDependentFeatures())
					)
				)

		internalDependeeFeatures(): Set(Feature) = self.allEnclosedFeaturesRecursively()  
		   -> intersection( allEnclosedFeaturesRecursively() -> collect(allDependeeFeatures()) -> asSet() -> flatten())
	
		internalDependentFeatures(): Set(Feature) = self.allEnclosedFeaturesRecursively()  
		   -> intersection( allEnclosedFeaturesRecursively() -> collect(allDependentFeatures()) -> asSet() -> flatten())		

		-------------- ABSOLUTE COUPLING METRICS -------------------

		-- Source Coupling Commitment Size:
		-- Number of different internal features depending on external features
		SCouComS(): Integer = externalDependeeFeatures().dependencyDestinations.origin->asSet->
						intersection(self.allEnclosedFeaturesRecursively())->size()

		-- Source Coupling Commitment Index:
		-- Percentage of different internal features depending on external features
		SCouComI(): Real = 
				if self.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    SCouComS() / self.internalFeatures()->size()
 				endif

		-- Target Coupling Commitment Size:
		-- Number of different internal features on which external features depend
		TCouComS(): Integer = self.externalDependentFeatures().dependencyOrigins.destination->asSet->
						intersection(self.allEnclosedFeaturesRecursively())->size()

		-- Target Coupling Commitment Index:
		-- Percentage of different internal features on which external features depend
		TCouComI(): Real =
				if self.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    TCouComS() / self.internalFeatures()->size()
 				endif



		-------------- ABSOLUTE COHESION METRICS -------------------

		-- Source Cohesion Commitment Size:
		-- Number of different internal features depend on any internal feature
//		SCohComS_(): Integer = internalDependeeFeatures().origin->intersection(self.internalFeatures())->size()
		SCohComS(): Integer = RSCohComS(self)

		-- Source Cohesion Commitment Index:
		-- Percentage of different internal features depend on any internal feature
//		SCohComI_(): Real = SCohComS() / internalFeatures()->size()
		SCohComI(): Real = RSCohComI(self)


		-- Target Cohesion Commitment Size:
		-- Number of different internal features on which any internal feature depends
//		TCohComS_(): Integer = self.internalDependentFeatures().destination->
//							intersection(self.internalFeatures())->size()
		TCohComS(): Integer = RTCohComS(self)

		-- Target Cohesion Commitment Index:
		-- Percentage of different internal features on which any internal feature depends
//		TCohComI_(): Real = TCohComS() / internalFeatures()->size()
		TCohComI(): Real =  RTCohComI(self)

		---------------- RELATIVE COUPLING METRICS -----------------
		
		-- Relative Source Coupling Commitment Size:
		-- Number of different internal features depending on the external features from another feature
		RSCouComS(container: ModularFeature): Integer = container.externalFeatures().dependencyDestinations.origin->asSet->
							intersection(self.internalFeatures())->size()

		-- Relative Source Coupling Commitment Index:
		-- Percentage of different internal features depending on the external features from another feature
		RSCouComI(container: ModularFeature): Real = 
				if self.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RSCouComS(container) / self.internalFeatures()->size()
 				endif

		-- Relative Target Coupling Commitment Size:
		-- Number of different internal features on which features external to another feature depend
		RTCouComS(container: ModularFeature): Integer = container.externalFeatures().dependencyOrigins.destination->asSet->
							intersection(self.internalFeatures())->size()

		-- Relative Target Coupling Commitment Index:
		-- Percentage of different internal features on which features external to another feature depend
		RTCouComI(container: ModularFeature): Real =
				if self.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RTCouComS(container) / self.internalFeatures()->size()
 				endif


		---------------- RELATIVE COHESION METRICS -----------------
		
		-- Relative Source Cohesion Commitment Size:
		-- Number of different internal features depend on the internal features from another feature which contains it
		RSCohComS(container: ModularFeature): Integer = container.internalFeatures().dependencyDestinations.origin->asSet->
							intersection(self.internalFeatures())->size()

		-- Relative Target Cohesion Commitment Size:
		-- Number of different internal features on which any internal feature from another feature, which contains it, depends
		RTCohComS(container: ModularFeature): Integer = container.internalFeatures().dependencyOrigins.destination->asSet->
							intersection(self.internalFeatures())->size()
							
		-- Relative Source Cohesion Coverage Index:
		-- Percentage of different external features, internal to another feature, which contains it, a feature depends on
		RSCohCovI(container: ModularFeature): Real = 
				if container.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RSCohCovS(container) / container.internalFeatures()->size()
 				endif
				
		-- Relative Target Cohesion Coverage Index:
		-- Percentage of different external features, internal to another feature, which contains it, depend on a feature
		RTCohCovI(container: ModularFeature): Real =
				if container.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RTCohCovS(container) / container.internalFeatures()->size()
 				endif
				
		-- Relative Source Cohesion Commitment Index:
		-- Percentage of different internal features depend on the internal features from another feature which contains it
		RSCohComI(container: ModularFeature): Real = 
				if container.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RSCohComS(container) / container.internalFeatures()->size()
 				endif

		-- Relative Target Cohesion Commitment Index:
		-- Percentage of different internal features on which any internal feature from another feature, which contains it, depends
		RTCohComI(container: ModularFeature): Real = 
				if container.internalFeatures()->isEmpty() then
 				    0.0
				else
 				    RTCohComS(container) / container.internalFeatures()->size()
 				endif
				

end --


--------------------------------------------------------------
-- Associations
--------------------------------------------------------------
association dependencyOriginDefinition between 
		Feature [1] role origin
		Dependency [0..*] role dependencyOrigins
end

association dependencyDestinationDefinition between 
		Feature [1] role destination
		Dependency [0..*] role dependencyDestinations
end

association dependencyTypeOriginDefinition between 
		FeatureType [1] role origin
		DependencyType [0..*] role dependencyTypeOrigins
end

association dependencyTypeDestinationDefinition between 
		FeatureType [1] role destination
		DependencyType [0..*] role dependencyTypeDestinations
end

aggregation contains between 
	ModularFeature [0..1] role modularFeature
	Feature [0..*] role feature
end

association hasModularFeatureType between 
	ModularFeature [0..*] role modularFeature
	ModularFeatureType [1] role modularFeatureType
end

association hasAtomicFeatureType between 
	AtomicFeature [0..*] role atomicFeature
	AtomicFeatureType [1] role atomicFeatureType
end

association hasNature between 
	Feature [0..*] role feature
	Nature [1] role nature
end

association hasDependencyType between 
	Dependency [0..*] role dependency
	DependencyType [1] role dependencyType
end

aggregation aggregates between 
	ModularFeatureType [0..1] role modularFeatureType
	FeatureType [0..*] role featureType
end

association offers between 
	Formalism [0..*] role formalism
	FeatureType [0..*] role featureType
end

association provides between 
	Formalism [0..*] role formalism
	DependencyType [0..*] role dependencyType
end

association implements between 
	Formalism [0..*] role formalism	
	Paradigm [0..*] role paradigm
end

association extends between 
	Formalism [0..*] role extension
	Formalism [0..1] role base
end

------------------------------------------------------------------------
constraints
------------------------------------------------------------------------

	context Formalism

	// a formalism cannot extend itself either directly or indirectly
	inv noCircularExtension:		

		not self.circularBaseFormalisms()


	context FeatureType
	
	// there are no circular aggregations (either direct or indirect)
	inv noCircularAggregation:

		not self.circularModularFeatureTypes()

/*
	context DependencyType

	// the feature types involved in a given dependency type must be offered by the corresponding formalism
	inv formalismHasFeatureTypes:

		self.formalism.featureType->includesAll(Bag{self.origin, self.destination})			

*/


--     ________________________________________________
--     context <class name>::<operation signature>

--     pre <precondition id>: <precondition body>

--     post <postcondition id>: <postcondition body>
--     ________________________________________________

-- end constraints


