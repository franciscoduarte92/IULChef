
---------------------------------------------------------------------------------
model IULChef
---------------------------------------------------------------------------------

enum TipoEmpregado {Gerente, Cozinheiro, EmpregadoMesa}
enum Unidade {Kilo, Litro, Dose, Avulso}
enum TipoProduto {Perecivel, NaoPerecivel}
enum FamiliaProdutoSimples {BebidasNaoAlcoolicas, BebidasAlcoolicas, Cereais, Carne, 
		Peixe, LacteosOvos, GordurasAlimentares, Frutos, Vegetais, Doces, Outros}
enum GrupoProdutoComposto {Menu, Entrada, PratoPrincipal, Guarnicao, Sobremesa, Cocktail}

--------------------------------------------------------------
-- Domain types
--------------------------------------------------------------
abstract class Entidade
	attributes
		nome: String
		morada: String
		nc: Integer
		
	constraints
		@NomeDeveSerPreenchido(rationale="O nome da entidade deve ser preenchido!")
		inv NomeDeveSerPreenchido: self.nome.isDefined()
		
		@NCDeveSerPreenchido(rationale="O número de contribuinte da entidade deve ser preenchido!")
		inv NCDeveSerPreenchido: self.nc.isDefined()
		
		@NCdeveSerUnico(rationale="O número de contribuinte da entidade deve ser único!")
		inv NCdeveSerUnico: Entidade.allInstances->isUnique(nc)
end
--------------------------------------------
class Restaurante < Entidade
	constraints
		@NumeroMesaDeveSerUnico(rationale="Um restaurante não pode ter mais do que uma mesa com o mesmo número!")
		inv NumeroMesaDeveSerUnico: self.mesas->isUnique(numero)
		
		@NumeroFaturaDeveSerUnico(rationale="Um restaurante não pode ter mais do que uma fatura com o mesmo número!")
		inv NumeroFaturaDeveSerUnico: self.faturas->isUnique(numero)
		
		@DataInventarioDeveSerUnica(rationale="Um restaurante não pode ter mais do que um inventário com a mesma data!")			
		inv DataInventarioDeveSerUnica: self.inventarios->isUnique(data)
end
--------------------------------------------
class Empregado < Entidade
	attributes
		tipo: TipoEmpregado
		
	constraints
		@TipoDeveSerPreenchido(rationale="O tipo de empregado deve ser preenchido!")
		inv TipoDeveSerPreenchido: self.tipo.isDefined()
end
--------------------------------------------
class Cliente < Entidade
end
--------------------------------------------
class Fornecedor < Entidade
end
--------------------------------------------
abstract class Produto
	attributes
		nome: String
		tipo: TipoProduto
		unidade: Unidade	
		precoVenda: Real
		
	constraints
		@NomeDeveSerPreenchido(rationale="O nome do produto deve ser preenchido!")
		inv NomeDeveSerPreenchido: self.nome.isDefined()
		
		@TipoDeveSerPreenchido(rationale="O tipo de produto deve ser preenchido!")
		inv TipoDeveSerPreenchido: self.tipo.isDefined()
		
		@UnidadeDeveSerPreenchida(rationale="A unidade do produto deve ser preenchida!")
		inv UnidadeDeveSerPreenchida: self.unidade.isDefined()
		
		@PrecoDeveSerPreenchido(rationale="O preço de venda do produto deve ser preenchido!")
		inv PrecoDeveSerPreenchido: self.precoVenda.isDefined()
end
--------------------------------------------
class ProdutoSimples < Produto
	attributes
		codigoBarras: Integer
		familia: FamiliaProdutoSimples
		
	constraints
		@FamiliaDeveSerPreenchida(rationale="A familia do produto simples deve ser preenchida!")
		inv FamiliaDeveSerPreenchida: self.familia.isDefined()
		
		@CodigoBarrasDeveSerUnico(rationale="O código de barras do produto deve ser único!")
		inv CodigoBarrasDeveSerUnico: ProdutoSimples.allInstances->select(codigoBarras.isDefined())->isUnique(codigoBarras)
end
--------------------------------------------
class ProdutoComposto < Produto
	attributes
		grupo: GrupoProdutoComposto
		
	constraints
		@GrupoDeveSerPreenchido(rationale="O grupo do produto composto deve ser preenchido!")
		inv GrupoDeveSerPreenchido: self.grupo.isDefined()
end
--------------------------------------------
class Mesa
	attributes
		numero: Integer
		
	constraints
		@NumeroDeveSerPreenchido(rationale="O número de mesa deve ser preenchido!")
		inv NumeroDeveSerPreenchido: self.numero.isDefined()
end
--------------------------------------------
class Fatura
	attributes
		numero: Integer
		data: CalendarDate
		
	constraints
		@NumeroDeveSerPreenchido(rationale="O número de mesa deve ser preenchido!")	
		inv NumeroDeveSerPreenchido: self.numero.isDefined()

		@DataDeveSerPreenchida(rationale="A data da fatura deve ser preenchida!")
		inv DataDeveSerPreenchida: self.data.isDefined()
		
		@CozinheirosNaoFaturam(rationale="Os cozinheiros não passam faturas!")
		inv CozinheirosNaoFaturam: self.empregado.tipo <> TipoEmpregado::Cozinheiro
end
--------------------------------------------
class Pedido
	attributes
		quantidade: Integer
		devolvido: Boolean
		
	constraints
		@QuantidadeDeveSerPreenchida(rationale="A quantidade do pedido deve ser preenchida!")		
		inv QuantidadeDeveSerPreenchida: self.quantidade.isDefined()
end
--------------------------------------------
class Inventario
	attributes
		data: CalendarDate
		
	constraints
		@DataDeveSerPreenchida(rationale="A data do inventário deve ser preenchida!")		
		inv DataDeveSerPreenchida: self.data.isDefined()
end
--------------------------------------------
associationclass Composicao
	between
		ProdutoComposto [*] role confecionados
		Produto [*] role ingredientes
	attributes
		quantidade: Real

	constraints
		@QuantidadeDeveSerPreenchida(rationale="A quantidade do ingrediente na composição do produto composto deve ser preenchida!")		
		inv QuantidadeDeveSerPreenchida: self.quantidade.isDefined()
end
--------------------------------------------
class Contagem
	attributes
		existencias: Integer
		quebras: Integer
end
--------------------------------------------
class Compra
	attributes
		quantidade: Integer
		precoAquisicao: Real
		data: CalendarDate

	constraints
		@QuantidadeDeveSerPreenchida(rationale="A quantidade do produto simples comprado deve ser preenchida!")		
		inv QuantidadeDeveSerPreenchida: self.quantidade.isDefined()

		@PrecoAquisicaoDeveSerPreenchido(rationale="O preço de aquisição do produto simples deve ser preenchido!")				
		inv PrecoAquisicaoDeveSerPreenchido: self.precoAquisicao.isDefined()

		@DataDeveSerPreenchida(rationale="A data da compra deve ser preenchida!")	
		inv DataDeveSerPreenchida: self.data.isDefined()
end
--------------------------------------------
associationclass Contrato
	between
		Restaurante [1..*] role empregadores
		Empregado [1..*] role contratados
	attributes
		inicio: CalendarDate
		fim: CalendarDate
		vencimento: Real
		
	constraints
		@DataInicioDeveSerPreenchida(rationale="A data de início do contrato deve ser preenchida!")			
		inv DataInicioDeveSerPreenchida: self.inicio.isDefined()
		
		@VencimentoDeveSerPreenchido(rationale="O vencimento a pagar mensalmente ao empregado no âmbito do contrato deve ser preenchido!")				
		inv VencimentoDeveSerPreenchido: self.vencimento.isDefined()
end

--------------------------------------------------------------
-- Associations
--------------------------------------------------------------
association Restaurante_Produto between 
	Restaurante [*] role restaurantes
	Produto [*] role produtos
end

composition Restaurante_Compra between 
	Restaurante [1]
	Compra [*] role compras
end

composition Restaurante_Fatura between 
	Restaurante [1]
	Fatura [*] role faturas
end

composition Restaurante_Mesa between 
	Restaurante [1]
	Mesa [*] role mesas ordered
end

association Fatura_Mesa between 
	Fatura [*] role faturas
	Mesa [1] 
end

association Fatura_Cliente between 
	Fatura [*] role faturas
	Cliente [0..1] 
end

association Fatura_Empregado between 
	Fatura [*] role faturas
	Empregado [1]
end

composition Fatura_Pedido between 
	Fatura [1]
	Pedido [1..*] role pedidos
end

association Pedido_Produto between 
	Pedido [*] role pedidos
	Produto [1]
end

composition Restaurante_Inventarios	between
	Restaurante [1]
	Inventario [*] role inventarios
end

composition Inventario_Contagem	between
	Inventario [1]
	Contagem [*] role contagens
end

association Contagem_ProdutoSimples between
	Contagem [*] role contagens
	ProdutoSimples [1]
end
	
association Compra_ProdutoSimples between	
	Compra [*] role compras
	ProdutoSimples [1]
end

association Compra_Fornecedor between	
	Compra [*] role compras
	Fornecedor [1]
end

--------------------------------------------------------------
-- Library types
--------------------------------------------------------------
class CalendarDate

	attributes
		day: Integer
		month: Integer
		year: Integer

	operations

		init(day: Integer, month: Integer, year: Integer)
			begin
				self.day:= day;
				self.month:= month;
				self.year:= year
			end
			
		-- date format: yyyy-mm-dd
		initS(date: String)
			begin
				self.year:= date.substring(1,4).toInteger();
				self.month:= date.substring(6,7).toInteger();
				self.day:= date.substring(9,10).toInteger()
			end
			
		isBefore(t: CalendarDate):Boolean = 
			if self.year = t.year then
				if self.month = t.month then
				self.day < t.day
				 else
				self.month < t.month
				 endif
			else 
				self.year < t.year
			endif

		isAfter(t: CalendarDate):Boolean =
			if self.year = t.year then
				if self.month = t.month then
					self.day > t.day
				 else
					self.month > t.month
				endif
			else 
				self.year > t.year
			endif

		isEqual(t: CalendarDate):Boolean =
			self.year  = t.year and
			self.month = t.month and
			self.day   = t.day

		yearsSince(t: CalendarDate):Integer =
			if self.month < t.month or
			   self.month = t.month and self.day < t.day then
					self.year - t.year -1
			else
				self.year - t.year
			endif

		isDivisible(x: Integer, y: Integer): Boolean = x div y * y = x
		
		isLeap(): Boolean =
			if isDivisible(self.year, 400) or isDivisible(self.year, 4) then
				true
			else
				if isDivisible(self.year, 100) then
					 false
				else
					if isDivisible(self.year, 4) then
						true
					else
						false
					endif
				endif
			endif
			
		isValid(): Boolean =
				self.month>=1 and self.month<=12 and self.day>=1 and
				if self.isLeap() then
					self.day<=Sequence{31,29,31,30,31,30,31,31,30,31,30,31}->at(self.month)
				else 
					self.day<=Sequence{31,28,31,30,31,30,31,31,30,31,30,31}->at(self.month)
				endif

		stringToDate(date: String): CalendarDate
			begin
			  declare 
					date_year : String,
					date_month : String,
					date_day : String;
					
				date_year:= date.substring(1,4);
				date_month:= date.substring(6,7);
				date_day:= date.substring(9,10);
				result:= CalendarDate.allInstances-> select(cd |
					cd.year=date_year.toInteger() and
					cd.month=date_month.toInteger() and 
					cd.day=date_day.toInteger())->asSequence()->first();
				if result.isUndefined() then
					result:= new CalendarDate('D'+date_year+date_month+date_day);
				  result.initS(date)
				end
			end
			
		toString(): String = 
			self.year.toString().concat('/').concat(self.month.toString()).concat('/').concat(self.day.toString())
			
	constraints
		@DateIsValid(rationale="The current date must be a valid one")
		inv DateIsValid: self.isValid()
		
		@DatesAreDistinct(rationale="CalendarDate objects contain distinct dates")
		inv DatesAreDistinct:
			CalendarDate.allInstances->isUnique(toString())
		
end --CalendarDate


